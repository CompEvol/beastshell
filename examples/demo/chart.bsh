// demonstrates various 2D charts

import com.xeiam.xchart.*;
import beast.app.shell.*;
import java.awt.*;

// simple chart

xData = c(-3, -2, -1, 0, 1, 2, 3);
yData = c(0.001, 0.01, 0.1, 1.0, 10.0, 100.0, 1000.0);

new Plot(series = new Series(x=xData, y=yData, seriesName="10^x"));

pause();

// Linechar 01
import com.xeiam.xchart.*;
import beast.app.shell.*;
import java.awt.*;

xData = new ArrayList<Integer>();
yData = new ArrayList<Double>();
for (i = -3; i <= 3; i++) {      
    xData.add(i);
    yData.add(Math.pow(10, i));
}
ser0 = new Series(x=xData, y=yData, seriesName="10^x");
style = new Style(isChartTitleVisible=false, legendPosition="InsideNW", isYAxisLogarithmic=true);
new Plot(series= ser0,  style=style);
pause();

// Linechar 02

 // generates sine data
int size = 30;
xData = new ArrayList<Integer>();
yData = new ArrayList<Double>();
for (int i = 0; i <= size; i++) {
  double radians = (Math.PI / (size / 2) * i);
  xData.add(i - size / 2);
  yData.add(size * Math.sin(radians));
}


series = new Series(x=xData, y=yData, seriesName="y=sin(x)", lc=Color.blue, linestyle="dash_dash", mc=Color.green, m="SQUARE");

new Plot(series=series, style=new Style(isChartTitleVisible=false, isLegendVisible=false));
pause();

// Linechar 06

xData = c(0, 1, 2, 3, 4, 5, 6);
yData = c(100, 100, 100, 60, 10, 10, 10 );
errdata = c( 50, 20, 10, 52, 9, 2, 1 );

series = new Series(x=xData, y=yData, error=errdata, seriesName="Error bar\ntest data", lc=Color.blue, linestyle="solid", mc=Color.green, m="DIAMOND");
style = new Style(yAxisMin=0.8, yAxisMax=1000, isYAxisLogarithmic=true, errorBarsColor=Color.black);
new Plot(series= series,  style=style);
pause();

// ErrorBarTest

xData = c( 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 );
yData1 = c( 100, 100, 100, 50, 50, 50, 50 );
errdata = c( 50, 20, 10, 50, 40, 20, 10 );

yData2 = c( 50, 80, 90, 0, 10, 30, 40 );
yData3 = c( 150, 120, 110, 100, 90, 70, 60 );


series1 = new Series(x=xData, y=yData1, error=errdata, seriesName="Error bar test data", lc=Color.blue, linestyle="solid", mc=Color.green, m="DIAMOND");
series2 = new Series(x=xData, y=yData2, seriesName="Y+error", lc=Color.blue, linestyle="dash_dash", mc=Color.red, m="NONE");
series3 = new Series(x=xData, y=yData3, seriesName="Y-error", lc=Color.blue, linestyle="dash_dash", mc=Color.red, m="NONE");
style = new Style(yAxisMin=0, yAxisMax=150, errorBarsColor=Color.black);

plot = new Plot(series= series1,  style=style);
plot.add(series2);
plot.add(series3);

pause();

// Area chart 01

style = new Style(chartType="Area", xatv=false, yatv=false, legendPosition="InsideNW");
series1 = new Series(seriesName="a", x=c(0, 3, 5, 7, 9), y=c( -3, 5, 9, 6, 5 ));
series2 = new Series(seriesName="b", x=c(0, 2, 4, 6, 9 ), y=c(-1, 6, 4, 0, 4 ));
series3 = new Series(seriesName="c", x=c(0, 1, 3, 8, 9 ), y=c(-2, -1, 1, 0, 1 ));
plot = new Plot(series = series1, style=style);
plot.add(series2);
plot.add(series3);

pause();

// Area chart 02
xData = c(0, 1, 2, 3,  4,   5,  6,  7,  8,   9,  10,  11);
yData = c(0, 1, 4, 9, 16, null, 36, 49, 64,   null, 100, 90);
new Plot(series = new Series(seriesName="a", x=xData, y=yData), style= style);

pause();

// Scatter chart 01

x = rnorm(1000, 0, 1);
y = rnorm(1000, 0, 1);
style = new Style(chartType="Scatter", markerSize=16, legendPosition="InsideSW", xatv=false, yatv=false);
new Plot(series=new Series(seriesName="Gaussian blob", x=x, y=y, marker="CIRCLE"), style=style);

pause();

// Scatter chart 02

xData = new ArrayList<Double>();
yData = new ArrayList<Double>();
int size = 400;
nextRandom = runif(size * 2, 0, 1);
for (int i = 0; i < size; i++) {
 xData.add(Math.pow(10, nextRandom.get(2*i) * 10));
 yData.add(nextRandom.get(i*2) + nextRandom.get(i*2+1));
}

style = new Style(chartType="Scatter", legendPosition="InsideN", xatv=false, yatv=false, isXAxisLogarithmic=true);
new Plot(series=new Series(seriesName="logarithmic data", x=xData, y=yData, marker="CIRCLE"), style=style, title="Logarithmic Data");

pause();

// Scatter chart 03

style = new Style(chartType="Scatter");
new Plot(series=new Series(seriesName="single point(1,1)", x=c(1), y=c(1)), style=style, title="Single Point");

pause();

// Scatter chart 04

size = 10;
xData = new ArrayList<Integer>();
yData = new ArrayList<Double>();
errorBars = new ArrayList<Double>();
for (i = 0; i <= size; i++) {
 xData.add(i);
 yData.add(10 * Math.exp(-i));
 errorBars.add(Math.random() + .3);
}

style = new Style(chartType="Scatter", xatv=false, yatv=false, isChartTitleVisible=false, isLegendVisible=false);
new Plot(series=new Series(seriesName="a", x=xData, y=yData, error=errorBars), style=style);

pause();

// Bar chart 01
    
style = new Style(chartType="Bar", legendPosition="InsideNW");
series=new Series(seriesName="test 1", x=c( 0, 1, 2, 3, 4 ), y = c( 4, 5, 9, 6, 5 ));
new Plot(series=series, style=style, title="Score Histogram", xAxisTitle="Score", yAxisTitle="Number");

pause();

// Bar chart 02
import com.xeiam.xchart.*;
import beast.app.shell.*;
import java.awt.*;

xData = new ArrayList<Number>();
yData = new ArrayList<Number>();

random = new java.util.Random();
for (int i = 1; i <= 8; i++) {
 xData.add(2000+i);
 yData.add(-1 * ((random.nextInt(i) + 1)));
}
series = new Series(seriesName="Model 77", x=xData, y=yData, lineColor=Color.RED);
style =new Style(theme="Matlab", chartType="Bar",  isPlotGridLinesVisible=false);
new Plot(series=series, style=style, title="Units Sold Per Year", xAxisTitle="Year",yAxisTitle="Units Sold")

pause();

// Bar chart 05

style = new Style(theme="GGPlot2", chartType="Bar");
series1 = new Series(seriesName="fish", x=c("Blue", "Red", "Green", "Yellow"), y=c(-40, 30, 20, 60));
series2 = new Series(seriesName="worms", x=x, y=c(50, 10, -20, 40 ));
plot = new Plot(style=style, series=series1, title = "Temperature vs. Color", xAxisTitle ="Color", yAxisTitle ="Temperature");
plot.add(series2);

pause();

// with missing data

plot = new Plot(style=style, series=series1, title = "Temperature vs. Color", xAxisTitle ="Color", yAxisTitle ="Temperature");
series3 = new Series(seriesName="archea", x=x, y=c(10, 10, 0, -10 ));
plot.add(series3);

pause();

// Bar chart 06

getGaussianData(int count, int seed) {
    data = new ArrayList<Double>(count);
    r = new Random(seed);
    for (i = 0; i < count; i++) {
      data.add(r.nextGaussian() * 10);
    }
    return data;
}

Histogram histogram1 = new Histogram(getGaussianData(10000, 123), 30, -30, 30);
Histogram histogram2 = new Histogram(getGaussianData(5000, 123), 30, -30, 30);
series1 = new Series(seriesName="histogram 1", x=histogram1.getxAxisData(), y=histogram1.getyAxisData());
series2 = new Series(seriesName="histogram 2", x=histogram2.getxAxisData(), y=histogram2.getyAxisData());

style = new Style(chartType="Bar", barWidthPercentage=0.96, isBarsOverlapped=true,  legendPosition="InsideNW");

plot = new Plot(series=series1, style=style, title="Score Histogram", xAxisTitle="Mean", yAxisTitle="Count");
plot.add(series2);

pause();

// Bar chart 07

Histogram histogram1 = new Histogram(getGaussianData(500, 123), 20, -25, 25);
Histogram histogram2 = new Histogram(getGaussianData(500, 124), 20, -25, 25);
series1 = new Series(seriesName="histogram 1", x=histogram1.getxAxisData(), y=histogram1.getyAxisData());
series2 = new Series(seriesName="histogram 2", x=histogram2.getxAxisData(), y=histogram2.getyAxisData());

style = new Style(chartType="Bar", barWidthPercentage=0.96, legendPosition="InsideNW");

plot = new Plot(series=series1, style=style, title="Score Histogram", xAxisTitle="Mean", yAxisTitle="Count");
plot.add(series2);

pause();

// Date chart 01

generateData(String dateFormat, int n) {
	xData.clear();
	yData.clear();
	random = new Random();
	sdf = new java.text.SimpleDateFormat(dateFormat);
	date = null;
	for (int i = 1; i <= 14; i++) {
		try {
		switch(n) {
		case 0: date = sdf.parse("23:45:31." + (100 * i + random.nextInt(20))); break;
	   	case  1: date = sdf.parse("23:45:" + (5 * i + random.nextInt(2)) + "." + random.nextInt(1000)); break;
	   	case  2: date = sdf.parse("08:" + (5 * i + random.nextInt(2)) + ":" + (random.nextInt(2)) + "." + random.nextInt(1000)); break;
	   	case  3: date = sdf.parse("25-" + (2 * i + random.nextInt(2))); break;
	   	case  4: date = sdf.parse("02-" + (6 * i + random.nextInt(2))); break;
	   	case  5: date = sdf.parse("2013-" + (2 * i + random.nextInt(1))); break;
	   	case  6: date = sdf.parse("" + (2001 + i) + "-" + random.nextInt(12));
		}
	 	} catch (ParseException e) {
	   		e.printStackTrace();
	 	}
		xData.add(date);
	 	yData.add(Math.random() * i);
	}
}

xData = new ArrayList<Date>();
yData = new ArrayList<Double>();
generateData("HH:mm:ss.S", 0);

style = new Style(isLegendVisible = false);
series = new Series(seriesName="blah", x=xData, y=yData, marker="NONE");
new Plot(style=style, series=series, title="Millisecond Scale");

pause();

// Date chart 02

generateData("HH:mm:ss.SSS", 1);
series = new Series(seriesName="blah", x=xData, y=yData, marker="NONE");
new Plot(style=style, series=series, title="Seconds Scale");

pause();

// Date chart 03

generateData("HH:mm:ss.SSS", 2);
series = new Series(seriesName="blah", x=xData, y=yData, marker="NONE");
new Plot(style=style, series=series, title="Minutes Scale");

pause();

// Date chart 04

generateData("dd-HH", 3);
series = new Series(seriesName="blah", x=xData, y=yData, marker="NONE");
new Plot(style=style, series=series, title="Hour Scale");

pause();

// Date chart 05

generateData("MM-dd", 4);
series = new Series(seriesName="blah", x=xData, y=yData, marker="NONE");
new Plot(style=style, series=series, title="Day Scale");

pause();

// Date chart 06

generateData("yyyy-MM", 5);
series = new Series(seriesName="blah", x=xData, y=yData, marker="NONE");
new Plot(style=style, series=series, title="Month Scale");

pause();

// Date chart 07

generateData("yyyy", 6);
series = new Series(seriesName="blah", x=xData, y=yData, marker="NONE");
new Plot(style=style, series=series, title="Year Scale");

pause();

// String labeled chart

x = c("humans","chimp","dog","fruit fly");
y = c(100, 98, 95, 60);

style = new Style(chartType="Bar", legendPosition="InsideSW");
series=new Series(seriesName="%DNA", x=x, y=y);
new Plot(series=series, style=style, title="Percentage DNA in common with homo sapiens", xAxisTitle="Species", yAxisTitle="Number");

